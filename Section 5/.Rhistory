head(diamonds)
?diamonds
ggplot(diamonds) +
geom_histogram( aes(x = price)) +
ggtitle("Histogram of price (counts)")
ggplot(diamonds) +
geom_histogram( aes(x = price,fill=cut), binwidth = 100) +
ggtitle("Histogram of price (counts), smaller binwidths")
ggplot(diamonds) +
geom_density( aes(x = price, fill = cut)) +
ggtitle("Density plot of price, by cut (normalised and smoothed out)")
ggplot(diamonds) +
geom_density( aes(x = price, fill = cut), alpha=0.3) +
ggtitle("Density plot of price, by cut (normalised and smoothed out and with transparency)")
library(ggplot2)
head(diamonds)
summary(diamonds)
p <- ggplot(diamonds, aes( x = cut, y = price))
p + geom_boxplot() + ggtitle("box plot of diamond prices given their cut")
p + geom_boxplot(notch=TRUE) + ggtitle("boxplot of diamond prices given their cut, with notch")
p + geom_boxplot(aes(fill = clarity), notch=TRUE) + ggtitle("box plot of diamond prices given their cut and their clarity")
library(ggplot2)
head(diamonds)
summary(diamonds)
p <- ggplot(diamonds, aes( x = cut, y = price))
p + geom_boxplot() + ggtitle("box plot of diamond prices given their cut")
p + geom_boxplot(notch = TRUE) + ggtitle("boxplot of diamond prices given their cut, with notch")
p + geom_boxplot(aes(fill = clarity), notch=TRUE) + ggtitle("box plot of diamond prices given their cut and their clarity")
setwd("~/packt/Section 3")
rm(list=ls())
library(ggplot2)
?ChickWeight
# How many chicks per diet?
aggregate(Chick ~ Diet, data = ChickWeight, FUN = function(x) length(unique(x)))
ggplot(ChickWeight) +
geom_line(aes( x = Time, y = weight, colour = Diet, group = Chick)) +
ggtitle("Weight versus age of chicks on different diets")
library(ggplot2)
?mpg
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point() +
ggtitle("city miles per gallon vs highway miles per gallon")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes( size = displ, colour = manufacturer)) +
ggtitle("city miles per gallon vs  highway miles per gallon\nwith extra information")
library(ggplot2)
?mpg
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point() +
ggtitle("city miles per gallon vs highway miles per gallon")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes( size = displ, colour = manufacturer)) +
ggtitle("city miles per gallon vs  highway miles per gallon\nwith extra information")
library(ggplot2)
?mpg
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point() +
ggtitle("city miles per gallon vs highway miles per gallon")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes( size = displ, colour = manufacturer)) +
ggtitle("city miles per gallon vs  highway miles per gallon\nwith extra information")
library(ggplot2)
?mpg
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point() +
ggtitle("city miles per gallon vs highway miles per gallon")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes( size = displ, colour = manufacturer)) +
ggtitle("city miles per gallon vs  highway miles per gallon\nwith extra information")
# Activity 03_03: minimise overplotting with jitter
library(ggplot2)
nrow(mpg)
# over plotting
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes(colour = manufacturer), size = 3) +
ggtitle("No jitter: some points are covering others")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes(colour = manufacturer), position=position_jitter(width=0.1), size = 3) +
ggtitle("After jittering. The graphs conveys the actual number of points better.")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes(colour = manufacturer), position=position_jitter(width=0.1), size = 3, alpha = 0.7) +
ggtitle("After jittering. The graphs conveys the actual number of points better.\n with some transparency")
library(ggplot2)
nrow(mpg)
# over plotting
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes(colour = manufacturer), size = 3) +
ggtitle("No jitter: some points are covering others")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes(colour = manufacturer), position=position_jitter(width=0.1), size = 3) +
ggtitle("After jittering. The graphs conveys the actual number of points better.")
ggplot(mpg, aes( x = cty, y = hwy)) +
geom_point( aes(colour = manufacturer), position=position_jitter(width=0.1), size = 3, alpha = 0.7) +
ggtitle("After jittering. The graphs conveys the actual number of points better.\n with some transparency")
# Activity 03_04: Faceting with 1 variable
library(ggplot2)
# one single plot
ggplot(diamonds) +
geom_histogram(aes(x=price, fill=cut)) +
ggtitle("One single plot")
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
facet_wrap( ~ cut) +
ggtitle("One plot per cut")
?facet_wrap
library(ggplot2)
# one single plot
ggplot(diamonds) +
geom_histogram(aes(x=price, fill=cut)) +
ggtitle("One single plot")
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
facet_wrap( ~ cut) +
ggtitle("One plot per cut")
library(ggplot2)
# one single plot
ggplot(diamonds) +
geom_histogram(aes(x=price, fill=cut)) +
ggtitle("One single plot")
# one plot per cut
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
facet_wrap( ~ cut) +
ggtitle("One plot per cut")
?facet_wrap
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
scale_x_log10() +
facet_grid( color ~ cut) +
ggtitle("with facet_grid")
?facet_grid
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
scale_x_log10() +
facet_grid( color ~ cut, margins = TRUE) +
ggtitle("with facet_grid")
library(ggplot2)
# distribution of diamond price given color and cut.
# note the the use of scale_x_log10 instead of using log10(price). The x-axis is easier to read on the log scale.
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
scale_x_log10() +
facet_wrap( color ~ cut) +
ggtitle("with facet_wrap")
ggplot(diamonds) +
geom_histogram(aes(x=price)) +
scale_x_log10() +
facet_grid( color ~ cut) +
ggtitle("with facet_grid")
?facet_grid
setwd("~/packt/Section 4")
# activity 04_01:  linear and polynomial fits
library(ggplot2)
# plot all data points, with some jittering
p <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) + geom_point()
# Connected lines
p + geom_line(aes(group = Chick)) + ggtitle("connected lines")
library(ggplot2)
# plot all data points, with some jittering
p <- ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet)) + geom_point()
# Connected lines
p + geom_line(aes(group = Chick)) + ggtitle("connected lines")
p + geom_smooth(alpha = 0.2, size = 1)  + ggtitle("Default smoothing (loess)")
p + geom_smooth(alpha = 0.2, size = 1, method="lm") + ggtitle("Smoothing with 'lm'")
library(ggplot2)
# plot all data points, with some jittering
p <- ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet)) + geom_point()
# Connected lines
p + geom_line(aes(group = Chick)) + ggtitle("connected lines")
p + geom_smooth(alpha = 0.2, size = 1)  + ggtitle("Default smoothing (loess)")
p + geom_smooth(alpha = 0.2, size = 1, method="lm") + ggtitle("Smoothing with 'lm'")
library(ggplot2)
# polynomial fit
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_smooth(alpha=.2, size=1, method="lm", formula = y~poly(x,2)) +
ggtitle("Using a polynomial")
library(splines)
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_smooth(alpha=.2, size=1, method="lm", formula = y ~ ns(x, df = 3)) +
ggtitle("Using splines")
?ns
ggplot(mtcars, aes(x = qsec, y = wt)) +
geom_point() +
geom_smooth(se=FALSE, size = 1.2, colour="black",  method = loess) + # loess, the default for small datasets
geom_smooth(se=FALSE, size = 1.2, colour="red",  method = "lm") +    # linear model, same as formula = y ~ x
geom_smooth(se=FALSE, size = 1.2, colour="green", method = "lm", formula = y ~ ns(x,3)) + # splines
geom_smooth(se=FALSE, size = 1.2, colour="blue", method = "lm", formula = y ~ poly(x,2)) + # a polynomial of degree 2
geom_smooth(se=FALSE, size = 1.2, colour="yellow", method = "lm", formula = y ~ log(x)) # a logarithmic function
library(ggplot2)
# polynomial fit
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_smooth(alpha=.2, size=1, method="lm", formula = y~poly(x,2)) +
ggtitle("Using a polynomial")
library(splines)
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_smooth(alpha=.2, size=1, method="lm", formula = y ~ ns(x, df = 3)) +
ggtitle("Using splines")
?ns
# more examples of methods
ggplot(mtcars, aes(x = qsec, y = wt)) +
geom_point() +
geom_smooth(se=FALSE, size = 1.2, colour="black",  method = loess) + # loess, the default for small datasets
geom_smooth(se=FALSE, size = 1.2, colour="red",  method = "lm") +    # linear model, same as formula = y ~ x
geom_smooth(se=FALSE, size = 1.2, colour="green", method = "lm", formula = y ~ ns(x,3)) + # splines
geom_smooth(se=FALSE, size = 1.2, colour="blue", method = "lm", formula = y ~ poly(x,2)) + # a polynomial of degree 2
geom_smooth(se=FALSE, size = 1.2, colour="yellow", method = "lm", formula = y ~ log(x)) # a logarithmic function
library(ggplot2)
# checking the empirical distribution against the theoretical distribution
ggplot(data.frame( value = rnorm(1E3))) +
geom_density(aes(x=value)) +
stat_function(fun = dnorm, colour='red') +
ggtitle("Normally distributed data")
ggplot(someAverages) +
geom_density(aes( x = averages)) +
stat_function(
fun = dnorm,
colour='red',
args = list( mean = predictedMean, sd = predictedStandardDeviation )) +
ggtitle("The central limit theorem holds.")
someAverages <- data.frame( averages = replicate(1E3, mean(runif(10))))
# predicted mean and standard deviation from the central limit theorem.
predictedMean <- 0.5
predictedStandardDeviation <- sqrt(1/12)/sqrt(10)
ggplot(someAverages) +
geom_density(aes( x = averages)) +
stat_function(
fun = dnorm,
colour='red',
args = list( mean = predictedMean, sd = predictedStandardDeviation )) +
ggtitle("The central limit theorem holds.")
library(ggplot2)
# checking the empirical distribution against the theoretical distribution
ggplot(data.frame( value = rnorm(1E3))) +
geom_density(aes(x=value)) +
stat_function(fun = dnorm, colour='red') + # theory
ggtitle("Normally distributed data")
someAverages <- data.frame( averages = replicate(1E3, mean(runif(10))))
# predicted mean and standard deviation from the central limit theorem.
predictedMean <- 0.5
predictedStandardDeviation <- sqrt(1/12)/sqrt(10)
ggplot(someAverages) +
geom_density(aes( x = averages)) +
stat_function(
fun = dnorm,
colour='red',
args = list( mean = predictedMean, sd = predictedStandardDeviation )) +
ggtitle("The central limit theorem holds.")
install.packages("devtools")
devtools::install_github("bigvis")
install.packages("devtools")
devtools::install_github("bigvis")
library(ggplot2)
library(bigvis)
?bigvis::movies
myMovies <- subset(movies,length<300) # manually get rid of very long movies.
myMoviesSummarised <- with(myMovies,  condense(bin(length), bin(rating)))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Distribution of 130'000 movies along length and ratings")
# bin and condense the whole dataset
myMoviesSummarised <- with(movies,  condense(bin(length), bin(rating)))
# plotting the whole dataset
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised")
# peeling removes outliers
myMoviesSummarised <- peel(myMoviesSummarised)
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised and peeled")
# smoothing removes outliers
myMoviesSummarised <- smooth(myMoviesSummarised, h = c(10,1))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised, peeled and smoothed")
library(ggplot2)
library(bigvis)
?bigvis::movies
myMovies <- subset(movies,length<300) # manually get rid of very long movies.
myMoviesSummarised <- with(myMovies,  condense(bin(length), bin(rating)))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Distribution of 130'000 movies along length and ratings")
library(ggplot2)
library(bigvis)
# bin and condense the whole dataset
myMoviesSummarised <- with(movies,  condense(bin(length), bin(rating)))
# plotting the whole dataset
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised")
myMoviesSummarised <- peel(myMoviesSummarised)
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised and peeled")
myMoviesSummarised <- smooth(myMoviesSummarised, h = c(10,1))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised, peeled and smoothed")
library(ggplot2)
library(bigvis)
# bin and condense the whole dataset
myMoviesSummarised <- with(movies,  condense(bin(length), bin(rating)))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised")
myMoviesSummarised <- peel(myMoviesSummarised)
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised and peeled")
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised, peeled and smoothed")
library(ggplot2)
library(bigvis)
# bin and condense the whole dataset
myMoviesSummarised <- with(movies,  condense(bin(length), bin(rating)))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised")
myMoviesSummarised <- peel(myMoviesSummarised)
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised and peeled")
myMoviesSummarised <- smooth(myMoviesSummarised, h = c(10,1))
ggplot( data = myMoviesSummarised ) +
geom_tile(aes( x = length, y = rating, fill = .count)) +
ggtitle("Whole data set summarised, peeled and smoothed")
ggplot(diamonds) +
geom_point(aes(x=log10(carat),y=log10(price))) +
ggtitle('Manipulating data')
10^3.5
ggplot(diamonds) +
geom_point(aes(x=carat,y=price)) +
scale_x_log10() + scale_y_log10() +
ggtitle("Manipulating axes' scales")
p <-  ggplot(movies, aes( x = length)) + geom_histogram()
p + ggtitle('Showing all movies')
p + xlim(c(0,180)) + ggtitle('Showing only movies of duration between 0 and 3 hours.')
p <-  ggplot(movies, aes( x = length)) + geom_histogram()
p + ggtitle('Showing all movies')
library(ggplot2)
library(ggplot2)
# investigating a log-log relationship between diamonds' price and carat
ggplot(diamonds) +
geom_point(aes( x = log10(carat), y = log10(price))) +
ggtitle('Manipulating data')
ggplot(diamonds) +
geom_point(aes( x = carat, y = price)) +
scale_x_log10() + scale_y_log10() +
ggtitle("Manipulating axes' scales")
p <-  ggplot(movies, aes( x = length)) + geom_histogram()
p + ggtitle('Showing all movies')
p + xlim(c(0,180)) + ggtitle('Showing only movies of duration between 0 and 3 hours.')
library(ggplot2)
# Method of travel to work in England and Wales, 2011
# 2011 Census - Office for National Statistics
commute <- data.frame(
categories = c("other","car","public transport","cycle/walk","work from home"),
proportion = c(1,64,16,14,5)
)
head(commute)
ggplot(commute) +
geom_bar(aes(x=categories,y=proportion),stat="identity") +
ggtitle('default order')
ggplot(commute) +
geom_bar(aes(x=userDefined,y=proportion),stat="identity") +
ggtitle('user-defined order')
library(ggplot2)
# Method of travel to work in England and Wales, 2011
# 2011 Census - Office for National Statistics
commute <- data.frame(
categories = c("other","car","public transport","cycle/walk","work from home"),
proportion = c(1,64,16,14,5)
)
head(commute)
ggplot(commute) +
geom_bar(aes(x=categories,y=proportion),stat="identity") +
ggtitle('default order')
ggplot(commute) +
geom_bar(aes(x=userDefined,y=proportion),stat="identity") +
ggtitle('user-defined order')
library(ggplot2)
# Method of travel to work in England and Wales, 2011
# 2011 Census - Office for National Statistics
commute <- data.frame(
categories = c("other","car","public transport","cycle/walk","work from home"),
proportion = c(1,64,16,14,5)
)
head(commute)
ggplot(commute) +
geom_bar(aes(x=categories,y=proportion),stat="identity") +
ggtitle('default order')
commute$userDefined <- factor(
commute$categories,
c("car","public transport","cycle/walk","work from home","other"))
ggplot(commute) +
geom_bar(aes(x=userDefined,y=proportion),stat="identity") +
ggtitle('user-defined order')
ggplot(commute) +
geom_bar(aes(x=originalOrder,y=proportion), stat="identity") +
ggtitle('original order')
library(ggplot2)
# Method of travel to work in England and Wales, 2011
# 2011 Census - Office for National Statistics
commute <- data.frame(
categories = c("other","car","public transport","cycle/walk","work from home"),
proportion = c(1,64,16,14,5)
)
head(commute)
ggplot(commute) +
geom_bar(aes(x=categories,y=proportion),stat="identity") +
ggtitle('default order')
commute$userDefined <- factor(
commute$categories,
c("car","public transport","cycle/walk","work from home","other"))
ggplot(commute) +
geom_bar(aes(x=userDefined,y=proportion),stat="identity") +
ggtitle('user-defined order')
commute$originalOrder <- factor(
commute$categories,
as.character(commute$categories))
ggplot(commute) +
geom_bar(aes(x=originalOrder,y=proportion), stat="identity") +
ggtitle('original order')
library(ggplot2)
# The default colour scheme picks evenly spaced hues around the hue-chroma-luminance colour wheel.
p <- ggplot(diamonds) + geom_histogram(aes(x = cut,fill = clarity))
p + ggtitle("default palette")
setwd("~/packt/Section 5")
library(ggplot2)
# The default colour scheme picks evenly spaced hues around the hue-chroma-luminance colour wheel.
p <- ggplot(diamonds) + geom_histogram(aes(x = cut,fill = clarity))
p + ggtitle("default palette")
p + scale_fill_manual(
values = c( "I1" = "red", SI2 = "red", SI1 = "blue", "VS2" = "blue", "VS1" = "green", "VVS2" =  "green", "VVS1" = "black", "IF" = "#FEAC12")) +
ggtitle("User defined palette")
p + scale_fill_brewer(type='qual',palette="Set1") +
ggtitle("qualitative, set 1 from colorbrewer2.org")
# The default colour scheme picks evenly spaced hues around the hue-chroma-luminance colour wheel.
p <- ggplot(diamonds) + geom_histogram(aes(x = cut,fill = clarity))
p + ggtitle("default palette")
p + scale_fill_manual(
values = c(
I1   = "red",
SI2  = "red",
SI1  = "blue",
VS2  = "blue",
VS1  = "green",
VVS2 = "green",
VVS1 = "black",
IF   = "#FEAC12")) +
ggtitle("User defined palette")
p + scale_fill_brewer(type='qual',palette="Set1") +
ggtitle("qualitative, set 1 from colorbrewer2.org")
p + scale_color_gradient(limits = c(5000,10000), low = 'yellow', high = 'red') +
ggtitle("Gradient with custom gradient")
p <- ggplot(diamonds) +
geom_point(aes(x = carat,y = depth, color = price)) +
scale_x_log10()
p + ggtitle("Default palette")
# gradient with limits and custom colors
p + scale_color_gradient(limits = c(5000,10000), low = 'yellow', high = 'red') +
ggtitle("Gradient with custom gradient")
p + scale_color_gradient2(midpoint = mean(log10(diamonds$price)), trans = 'log10') +
ggtitle("Two gradients using the average price as midpoint")
library(ggplot2)
# default
p <- ggplot(diamonds) +
geom_point(aes(x = carat,y = depth, color = price)) +
scale_x_log10()
p + ggtitle("Default palette")
p + scale_color_gradient(limits = c(5000,10000), low = 'yellow', high = 'red') +
ggtitle("Gradient with custom gradient")
p + scale_color_gradient(
limits = c(5000,10000), low = 'yellow', high = 'red', na.value = NA) +
ggtitle("Gradient with custom gradient\nwithout unneccessary datapoints")
p + scale_color_gradient2(midpoint = mean(log10(diamonds$price)), trans = 'log10') +
ggtitle("Two gradients using the average price as midpoint")
p <- ggplot(head(mpg,50)) +
geom_point(aes(x = cty, y = hwy,color = trans, shape = class), size = 5)
p + ggtitle('Default legends')
p + xlab('city miles per gallon')  + ylab('highway miles per gallon') +
ggtitle('better axis labels')
p +
scale_shape_discrete(guide = guide_legend("Class")) + scale_color_discrete(guide = guide_legend("Transmission")) +
ggtitle("Custom legends using scales' parameters.")
p <- ggplot(mpg, aes(x = manufacturer)) + geom_histogram() + ylab("Number") + xlab('')
p + coord_flip() + ggtitle('Flipped axes')
mpg$manufacturer2 <- factor(mpg$manufacturer,rev(unique(mpg$manufacturer)))
ggplot(mpg) +
geom_histogram(aes( x = manufacturer2)) +
ylab("Number") +
xlab('') +
coord_flip() + ggtitle('flipped axes and reordered factors')
p <- ggplot(head(mpg,50)) +
geom_point(aes(x = cty, y = hwy,color = trans, shape = class), size = 5)
p + ggtitle('Default legends')
p + xlab('city miles per gallon')  + ylab('highway miles per gallon') +
ggtitle('better axis labels')
p +
scale_shape_discrete(guide = guide_legend("Class")) +
scale_color_discrete(guide = guide_legend("Transmission")) +
ggtitle("Custom legends using scales' parameters.")
p <- ggplot(mpg, aes(x = manufacturer)) + geom_histogram() + ylab("Number") + xlab('')
p + coord_flip() + ggtitle('Flipped axes')
mpg$manufacturer2 <- factor(mpg$manufacturer,rev(unique(mpg$manufacturer)))
ggplot(mpg) +
geom_histogram(aes( x = manufacturer2)) +
ylab("Number") +
xlab('') +
coord_flip() + ggtitle('flipped axes and reordered factors')
